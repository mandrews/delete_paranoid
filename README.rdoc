= delete_paranoid

Soft Delete ActiveRecord instances.

== Usage
  class Blog < ActiveRecord::Base
    acts_as_paranoid
  end
  blog = Blog.create! :name => 'foo'

<<<<<<< HEAD
  blog = Blog.create :name => 'foo'
  blog.destroy  #soft destroy the record
  
  # query databsae for results including soft-deleted objects
  deleted_blog = Blog.with_deleted do
    Blog.find blog.id
  end
    
  deleted_blog.destroy! #hard destroy the record
=======
  # soft delete the instance
  blog.destroy

  # query database for results *including* soft deleted objects
  Blog.with_deleted do
    Blog.all
  end

  # permenantly delete the instance from the database
  Blog.delete! blog.id
>>>>>>> 0945e5d2d3f1acbb3220a08857116711c941c1a0

== Features
* simple configuration
* preserves existing ActiveRecord API.  No magical new API's to use when you want to soft delete a record
* automatically exclude soft deleted records from database queries (by default)
* support for querying database for all records (including soft deleted ones)
* support for permenantly deleting record from database

* Simple configuration
* Preserves existing ActiveRecord API.  No magical new API's to use when you want to soft delete a record
* Supports soft-destroying and hard-destroying to associations marked as :dependent => :destroy
* Triggers destroy callbacks during soft-destroy
* Support for retrieving soft-deleted records
* Supports hard and soft delete

== Contributing

* Fork the project
* Fix the issue
* Submit a pull request on github

== Patch acceptance criteria

* tests must be included

== Copyright

Copyright (c) 2011 Ryan Sonnek. See LICENSE.txt for
further details.

